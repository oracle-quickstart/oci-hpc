---

- name: Generate gres.conf
  become: true
  template: 
    src: gres.conf.j2
    dest: /etc/slurm/gres.conf
    mode: '0644'
    backup: yes

- name: move slurm.conf on all servers
  become: true
  copy:
    dest: /etc/slurm/slurm.conf
    src: /etc/slurm/slurm.conf
    force: yes

- name: start slurmd
  become: true
  service:
    name: slurmd
    state: restarted
    enabled: true
 
- name: Update feature on compute node
  become: true
  command: "scontrol update nodename={{ ansible_hostname }} ActiveFeatures=cluster-size-{{ groups['compute'] | length }},{{ 'VM.Standard.E3.'~instance_pool_ocpus if shape == 'VM.Standard.E3.Flex' else shape }}"
  retries: 20
  delay: 10
  register: result
  until: result.rc == 0
  when: not initial | bool

- name: Update feature on compute node
  become: true
  command: "scontrol update nodename={{ ansible_hostname }} ActiveFeatures={% for item in range( groups['compute'] | length + 1 ) -%}
    cluster-size-{{ item }},{%- endfor %}{{ 'VM.Standard.E3.'~instance_pool_ocpus if shape == 'VM.Standard.E3.Flex' else shape }}"
  retries: 20
  delay: 10
  register: result
  until: result.rc == 0
  when: initial | bool

- name: Grab Node State
  shell: 'sinfo -h -o "%t" -n {{ ansible_hostname }}'
  register: node_state
  delegate_to: 127.0.0.1
  until: node_state.stdout.find("failure") == -1
  retries: 10
  delay: 5

- set_fact: 
    node_state2={{ node_state.stdout }}

- name: Update node state on bastion
  become: true
  command: scontrol update nodename={{ ansible_hostname }} state=RESUME
  when: ( node_state2 != "idle" ) and  ( node_state2 != "alloc" ) and  ( node_state2 != "mix" ) | bool
  register: result
  retries: 10
  delay: 5
  until: result is not failed
