---
- name: Get nccl version
  become: true
  shell: 
    cmd: find -L /usr/lib -name "libnccl.so*" -print | tail -1 | awk -F".so." '{print $2}'
  register: nccl_version_output
  delegate_to: "{{ groups['compute'][0] }}"        
  run_once: true  

- name: Set nccl version globally
  set_fact:
    nccl_version: "{{ nccl_version_output.stdout }}"
  delegate_to: localhost
  run_once: true

- name: Find nccl releases
  become: true
  shell:
    cmd: curl -s https://api.github.com/repos/nvidia/nccl/tags | jq -r '.[] | "\(.name) \(.tarball_url)"'
  register: nccl_releases
  delegate_to: localhost
  run_once: true

- name: Select appropriate NCCL version
  set_fact:
    nccl_tarball_url: "{{ nccl_releases.stdout_lines | select('search', nccl_version) | first | split(' ') | last }}"
  delegate_to: localhost
  run_once: true

- name: Download NCCL tarball
  become: true
  get_url:
    url: "{{ nccl_tarball_url }}"
    dest: "/tmp/nccl-{{ nccl_version }}.tar.gz"
  delegate_to: localhost
  run_once: true

- name: Copy nccl tarball to target
  become: true
  copy:
    src: "/tmp/nccl-{{ nccl_version }}.tar.gz"
    dest: "/tmp/nccl-{{ nccl_version }}.tar.gz"
  delegate_to: localhost
  run_once: true

- name: Extract NCCL tarball
  become: true
  unarchive:
    src: "/tmp/nccl-{{ nccl_version }}.tar.gz"
    dest: "/tmp"

- name: Get NCCL directory
  shell: "ls -d /tmp/NVIDIA-nccl-*"
  register: nccl_directory

- name: Build NCCL profiler plugin
  become: true
  command: make
  args:
    chdir: "{{ nccl_directory.stdout }}/ext-profiler/example"
  environment:
    PATH: "{{ ansible_env.PATH }}"

- name: Extract PLUGIN_SO filename from Makefile
  shell: |
    awk -F':= ' '/^PLUGIN_SO[[:space:]]*:=/ {print $2}' {{ nccl_directory.stdout }}/ext-profiler/example/Makefile
  register: plugin_so_filename
  changed_when: false

- name: Copy NCCL profiler library (Debian)
  become: true
  copy:
    src: "{{ nccl_directory.stdout }}/ext-profiler/example/{{ plugin_so_filename.stdout }}"
    dest: "/usr/lib/x86_64-linux-gnu/{{ plugin_so_filename.stdout }}"
    mode: "0644"
    remote_src: true
  when: ansible_os_family == "Debian"

- name: Copy NCCL profiler library (RedHat)
  become: true
  copy:
    src: "{{ nccl_directory.stdout }}/ext-profiler/example/{{ plugin_so_filename.stdout }}"
    dest: "/usr/lib64/{{ plugin_so_filename.stdout }}"
    mode: "0644"
    remote_src: true
  when: ansible_distribution == "RedHat"

- name: Install nccl-profiler-exporter python dependencies
  become: true
  pip:
    name:
      - watchdog
      - opentelemetry-sdk
      - opentelemetry-exporter-otlp
    executable: pip3

- name: Install NCCL trace exporter script
  become: true
  copy:
    src: nccl_profiler_exporter.py
    dest: "{{ nccl_exporter_script }}"
    mode: '0755'

- name: Find monitoring hosts
  set_fact:
    monitoring_hosts: "{{ groups['all'] | select('search', 'monitoring') | list }}"
  run_once: true

- name: Find controller hosts
  set_fact:
    controller_hosts: "{{ groups['all'] | select('search', 'controller') | list }}"
  run_once: true

- name: Set Tempo host
  set_fact:
    tempo_host: >-
      {{ monitoring_hosts[0] if monitoring_hosts | length > 0
         else controller_hosts[0] if controller_hosts | length > 0
         else groups['all'][0] }}
  run_once: true

- name: Set Tempo endpoint variable
  set_fact:
    tempo_endpoint: "{{ hostvars[tempo_host]['ansible_host'] | default(tempo_host) }}:4317"
  when: tempo_host is defined
  run_once: true

- name: Create systemd service for nccl-profiler-exporter
  become: true
  template:
    src: nccl-profiler-exporter.service.j2
    dest: "{{ exporter_service_file }}"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: 0744
    
- name: Ensure nccl-profiler-exporter service is enabled and running
  become: true
  systemd:
    name: nccl-profiler-exporter.service
    enabled: yes
    state: started
    daemon_reload: yes
