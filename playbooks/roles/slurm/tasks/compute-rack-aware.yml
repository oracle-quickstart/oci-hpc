---
- name: install SLURM compute packages
  vars: 
    package_name: '{{ slurm_compute_packages }}'
    package_repo: "{{ slurm_repos }}"
    disable_gpg_check_var: True
  include_role: 
    name: safe_yum

- name: Render systemd units for slurm, slurmdbd and munge
  become: true
  template:
    src: 'systemd/{{ item }}.service'
    dest: '/lib/systemd/system/{{ item }}.service'
    backup: "yes"
  with_items:
    - slurmd
  when: ansible_os_family == 'Debian'

- name: Create systemd unit dirs
  become: true
  file:
    name: '/etc/systemd/system/{{ item }}.service.d'
    state: directory
  with_items:
    - munge
    - slurmd

- name: Render systemd units for slurmd and munge
  become: true
  template:
    src: 'systemd/{{ item }}.service.d/unit.conf.j2'
    dest: '/etc/systemd/system/{{ item }}.service.d/unit.conf'
    backup: "yes"
  with_items:
    - munge
    - slurmd

- name: Create munge dir
  become: true
  file:
    name: '{{ munge_conf_path }}'
    state: directory
    owner: munge
    group: munge
    mode: 0700

- name: copy munge.key to tmp
  become: true
  shell:
    cmd: cp /etc/munge/munge.key /tmp/munge.key
    warn: false
  delegate_to: 127.0.0.1
  run_once: true

- name: set permissions
  become: true
  shell:
    cmd: chown {{ ansible_user }}:{{ ansible_user }} /tmp/munge.key
    warn: false
  delegate_to: 127.0.0.1
  run_once: true

- name: Copy munge key
  become: true
  copy:
    src: /tmp/munge.key
    dest: /etc/munge/munge.key
    owner: munge
    group: munge
    mode: '0400'
  notify: restart munge

- name: restart munge
  become: true
  service:
    name: munge
    state: restarted
    enabled: true

- name: Run the script to get the RackID
  shell: 'curl -sH "Authorization: Bearer Oracle" -L http://169.254.169.254/opc/v1/host | jq .rackId'
#  shell: echo $RANDOM | md5sum | head -c 20
  register: rackID_script

- name: Set RackID fact
  set_fact: 
    rackID: "{{ rackID_script.stdout[1:-1]}}"

- name: Get nodes from Inactive Switch
  vars:
    - keyword: "{% for partition in queues %}{% for instance in partition.instance_types %}{% if instance.name == instance_type %}{{instance.instance_keyword}}{% endif %}{% endfor %}{% endfor %}"
  shell: "cat {{ slurm_conf_path }}/topology.conf | grep \"SwitchName=inactive-{{queue}}-{{keyword}}\""
  register: inactive_switch
  run_once: true
  delegate_to: 127.0.0.1

- name: Get rackIDs for all compute nodes
  set_fact:
    racks_to_add_temp: "{{cluster_name}}:{{hostvars[item]['rackID']}}"
  with_items: "{{ play_hosts | difference(groups['bastion'])  | difference(groups['slurm_backup']) }}"
  run_once: true
  register: racks_to_add_temp_results

- name: Make a list of racks to add
  set_fact: racks_to_add="{{racks_to_add_temp_results.results | map(attribute='ansible_facts.racks_to_add_temp') | list | unique}}"
  run_once: true

- name: Get hostnames
  set_fact:
    nodes_to_add_temp: "{{hostvars[item]['ansible_hostname']}}"
  with_items: "{{ play_hosts | difference(groups['bastion']) | difference(groups['slurm_backup']) }}"
  run_once: true
  register: nodes_to_add_temp_results

- name: Make a list of nodes to add
  set_fact: nodes_to_add="{{nodes_to_add_temp_results.results | map(attribute='ansible_facts.nodes_to_add_temp') | list}}"
  run_once: true

- name: Get current nodes in Switch
  shell: "cat {{ slurm_conf_path }}/topology.conf | grep \"{{item}}\" | grep Nodes="
  register: nodes_in_switch
  delegate_to: 127.0.0.1
  run_once: true
  with_items: "{{racks_to_add}}"
  ignore_errors: yes

- name: Get current nodes in Switch hostlist
  vars:
    - switch_list_condensed: "{{item.stdout.split('Nodes=')[1]}}"
  command: "scontrol show hostname {{switch_list_condensed }}"
  register: switch_hostlist
  delegate_to: 127.0.0.1
  with_items: "{{nodes_in_switch.results}}"
  when: item.rc == 0

- name: Get hostlist if switch exists
  vars:
    new_line: "{% for node in ( play_hosts | difference(groups['bastion'])  | difference(groups['slurm_backup']) ) %}{% if cluster_name+':'+hostvars[node]['rackID'] == item.item.item %}{{hostvars[node]['ansible_hostname']}},{% endif %}{% endfor %}" 
  command: "scontrol show hostlistsorted {{ item.stdout_lines | union (new_line[:-1].split(',') | list )| join(',') }}"
  register: rack_hostlist1
  delegate_to: 127.0.0.1
  with_items: "{{switch_hostlist.results}}"
  run_once: true
  when: item.item.rc == 0

- name: Get hostlist if switch does not exists
  vars:
    new_line: "{% for node in ( play_hosts | difference(groups['bastion'])  | difference(groups['slurm_backup']) ) %}{% if cluster_name+':'+hostvars[node]['rackID'] == item.item.item %}{{hostvars[node]['ansible_hostname']}},{% endif %}{% endfor %}" 
  command: "scontrol show hostlistsorted {{ new_line[:-1] }}"
  register: rack_hostlist2
  delegate_to: 127.0.0.1
  with_items: "{{switch_hostlist.results}}"
  run_once: true
  when: item.item.rc > 0

- name: get Nodes on switch
  set_fact:
    nodes_on_switches: "{{nodes_on_switches | default({}) | combine({item.item.item.item : item.stdout } ) }}"
  with_items: "{{rack_hostlist1.results}}"
  run_once: true
  delegate_to: 127.0.0.1
  when: item.item.item.rc== 0

- name: get Nodes on switch
  set_fact:
    nodes_on_switches: "{{nodes_on_switches | default({}) | combine({item.item.item.item : item.stdout } ) }}"
  with_items: "{{rack_hostlist2.results}}"
  run_once: true
  delegate_to: 127.0.0.1
  when: item.item.item.rc > 0
  
- name: Add the nodes in the rack switches
  become: true
  lineinfile:
    path: "{{ slurm_conf_path }}/topology.conf"
    regexp: "SwitchName={{item.item.item}}\\sNodes.*"
    line: "SwitchName={{item.item.item}} Nodes={{nodes_on_switches[item.item.item]}}"
    state: present
  run_once: true
  with_items: "{{switch_hostlist.results}}"
  delegate_to: 127.0.0.1
  notify: reconfigure slurm

- name: Get inactive_hostlist
  vars:
    - inactive_list_condensed: "{{inactive_switch.stdout.split('Nodes=')[1]}}"
  command: "scontrol show hostname {{inactive_list_condensed }}"
  register: inactive_hostlist
  delegate_to: 127.0.0.1

- name: Create new inactive_hostlist
  command: "scontrol show hostlistsorted {{inactive_hostlist.stdout_lines | difference(nodes_to_add) | join(',')  }}"
  register: inactive_hostlist_condensed
  delegate_to: 127.0.0.1

- name: remove nodes from inactive
  become: true
  vars:
    - inactive_list: "{{inactive_switch.stdout.split('Nodes=')[1].split(',')}}"
    - keyword: "{% for partition in queues %}{% for instance in partition.instance_types %}{% if instance.name == instance_type %}{{instance.instance_keyword}}{% endif %}{% endfor %}{% endfor %}"
  lineinfile:
    path: "{{ slurm_conf_path }}/topology.conf"
    regexp: "SwitchName=inactive-{{queue}}-{{keyword}}\\sNodes.*"
    line: "SwitchName=inactive-{{queue}}-{{keyword}} Nodes={{inactive_hostlist_condensed.stdout}}"
    state: present
  run_once: true
  delegate_to: 127.0.0.1
  notify: reconfigure slurm

- name: Get racks in the Cluster
  block:
    - name: Get Racks from topology.conf
      shell: "cat {{ slurm_conf_path }}/topology.conf | grep \"SwitchName={{cluster_name}}:\" | awk '{print $1}' | sed 's/SwitchName=//' | tr '\n' ',' | sed 's/,$/\\n/'"
      register: racks_left
      run_once: true
      delegate_to: 127.0.0.1
    - name: Create list of racks
      set_fact:
        racks_left_list: "{{racks_left.stdout.split(',') | list}}"
  rescue:
    - name: Empty racks
      set_fact:
        racks_left_list: []

- name: Update Rack switches for the cluster
  become: true
  lineinfile:
    path: "{{ slurm_conf_path }}/topology.conf"
    regexp: "SwitchName={{cluster_name}}\\sSwitches.*"
    line: "SwitchName={{cluster_name}} Switches={{ racks_left_list | join(',') }}"
    state: present
  run_once: true
  delegate_to: 127.0.0.1
  when: racks_left_list | length > 0

- name: run handlers
  meta: flush_handlers
  
- name: start slurmd
  become: true
  service:
    name: slurmd
    state: restarted
    enabled: true

- name: Grab Node State
  shell: 'sinfo -h -o "%t" -n {{ ansible_hostname }}'
  register: node_state
  delegate_to: 127.0.0.1
  until: node_state.stdout.find("failure") == -1
  retries: 10
  delay: 5

- set_fact:
    node_state2={{ node_state.stdout }}

- name: Update node state on bastion
  become: true
  command: scontrol update nodename={{ ansible_hostname }} state=RESUME
  when: node_state2 != "idle" and node_state2 != "alloc"
  register: result
  retries: 10
  delay: 5
  until: result is not failed
  delegate_to: 127.0.0.1