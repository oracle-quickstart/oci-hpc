---
- name: install SLURM compute packages
  vars: 
    package_name: '{{ slurm_compute_packages }}'
    package_repo: "{{ slurm_repos }}"
  include_role: 
    name: safe_yum

- name: Render systemd units for slurmd
  become: true
  template:
    src: 'systemd/{{ item }}.service'
    dest: '/lib/systemd/system/{{ item }}.service'
    backup: "yes"
  with_items:
    - slurmd
  when: ansible_os_family == 'Debian'

- name: Create systemd unit dirs
  become: true
  file:
    name: '/etc/systemd/system/{{ item }}.service.d'
    state: directory
  with_items:
    - munge
    - slurmd

- name: Render systemd units for slurmd and munge
  become: true
  template:
    src: 'systemd/{{ item }}.service.d/unit.conf.j2'
    dest: '/etc/systemd/system/{{ item }}.service.d/unit.conf'
    backup: "yes"
  with_items:
    - munge
    - slurmd

- name: Create munge dir
  become: true
  file:
    name: '{{ munge_conf_path }}'
    state: directory
    owner: munge
    group: munge
    mode: 0700

- name: copy munge.key to tmp
  become: true
  shell:
    cmd: cp /etc/munge/munge.key /tmp/munge.key
    warn: false
  delegate_to: 127.0.0.1
  run_once: true

- name: set permissions
  become: true
  shell:
    cmd: chown {{ ansible_user }}:{{ ansible_user }} /tmp/munge.key
    warn: false
  delegate_to: 127.0.0.1
  run_once: true

- name: Copy munge key
  become: true
  copy:
    src: /tmp/munge.key
    dest: /etc/munge/munge.key
    owner: munge
    group: munge
    mode: '0400'
  notify: restart munge

- name: restart munge
  become: true
  service:
    name: munge
    state: restarted
    enabled: true


- name: Get hostnames
  set_fact:
    nodes_to_add_temp: "{{hostvars[item]['ansible_hostname']}}"
  with_items: "{{ play_hosts | difference(groups['bastion']) | difference(groups['slurm_backup']) }}"
  run_once: true
  register: nodes_to_add_temp_results

- name: Make a list of nodes to add
  set_fact: nodes_to_add="{{nodes_to_add_temp_results.results | map(attribute='ansible_facts.nodes_to_add_temp') | list }}"
  run_once: true

- name: Get nodes from Cluster Switch
  block:
    - name: Get nodes from topology.conf
      shell: "cat {{ slurm_conf_path }}/topology.conf | grep \"SwitchName={{cluster_name}}\""
      register: cluster_switch
      run_once: true
      delegate_to: 127.0.0.1
    - name: Get cluster_hostlist
      command: "scontrol show hostname {{cluster_switch.stdout.split('Nodes=')[1].split(',')}}"
      register: cluster_hostlist
      run_once: true
      delegate_to: 127.0.0.1
    - name: Create new cluster_hostlist
      command: "scontrol show hostlistsorted {{cluster_hostlist.stdout | list | union(nodes_to_add) | join(',') }}"
      register: cluster_hostlist_condensed_results
      delegate_to: 127.0.0.1
  rescue:
    - name: Create existing cluster list
      command: "scontrol show hostlistsorted {{ nodes_to_add | join(',') }}"
      register: cluster_hostlist_condensed_results
      delegate_to: 127.0.0.1

- name: Get nodes from Inactive Switch
  vars:
    - keyword: "{% for partition in queues %}{% for instance in partition.instance_types %}{% if instance.name == instance_type %}{{instance.instance_keyword}}{% endif %}{% endfor %}{% endfor %}"
  shell: "cat {{ slurm_conf_path }}/topology.conf | grep \"SwitchName=inactive-{{queue}}-{{keyword}}\""
  register: inactive_switch
  run_once: true
  delegate_to: 127.0.0.1


- name: add nodes to Switch
  become: true
  lineinfile:
    path: "{{ slurm_conf_path }}/topology.conf"
    regexp: "SwitchName={{cluster_name}}\\sNodes.*"
    line: "SwitchName={{cluster_name}} Nodes={{ cluster_hostlist_condensed_results.stdout }}"
    state: present
  run_once: true
  delegate_to: 127.0.0.1
  notify: reconfigure slurm

- name: Get inactive_hostlist
  vars:
    - inactive_list_condensed: "{{inactive_switch.stdout.split('Nodes=')[1]}}"
  command: "scontrol show hostname {{inactive_list_condensed }}"
  register: inactive_hostlist
  delegate_to: 127.0.0.1

- name: Create new inactive_hostlist
  command: "scontrol show hostlistsorted {{inactive_hostlist.stdout_lines | difference(nodes_to_add) | join(',')  }}"
  register: inactive_hostlist_condensed
  delegate_to: 127.0.0.1

- name: remove nodes from inactive
  become: true
  vars:
    - keyword: "{% for partition in queues %}{% for instance in partition.instance_types %}{% if instance.name == instance_type %}{{instance.instance_keyword}}{% endif %}{% endfor %}{% endfor %}"
  lineinfile:
    path: "{{ slurm_conf_path }}/topology.conf"
    regexp: "SwitchName=inactive-{{queue}}-{{keyword}}\\sNodes.*"
    line: "SwitchName=inactive-{{queue}}-{{keyword}} Nodes={{inactive_hostlist_condensed.stdout }}"
    state: present
  run_once: true
  delegate_to: 127.0.0.1
  notify: reconfigure slurm

- name: start slurmd
  become: true
  service:
    name: slurmd
    state: restarted
    enabled: true

- name: Grab Node State
  shell: 'sinfo -h -o "%t" -n {{ ansible_hostname }}'
  register: node_state
  delegate_to: 127.0.0.1
  until: node_state.stdout.find("failure") == -1
  retries: 10
  delay: 5

- set_fact:
    node_state2={{ node_state.stdout }}

- name: Update node state on bastion
  become: true
  command: scontrol update nodename={{ ansible_hostname }} state=RESUME
  when: node_state2 != "idle" and node_state2 != "alloc"
  register: result
  retries: 10
  delay: 5
  until: result is not failed
  delegate_to: 127.0.0.1