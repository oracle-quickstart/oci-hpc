---
- name: Install NVM
  uri:
    url: "{{ nvm_install_url }}"
    dest: "/tmp/nvm_install.sh"  # Save the script to a temporary file
    mode: 0755  # Make the script executable
  register: nvm_download_result
  become: true
  when: not ansible_env.HOME is undefined

- name: Execute NVM install script
  shell: "/tmp/nvm_install.sh"
  args:
    executable: /bin/bash
  environment:
    HOME: "{{ ansible_env.HOME }}"
  when: nvm_download_result.status == 200

- name: Load NVM in current shell
  shell: ". ~/.nvm/nvm.sh"
  args:
    executable: /bin/bash

- name: Install Node LTS and latest npm
  shell: |
    source ~/.nvm/nvm.sh
    nvm install --lts
    nvm install-latest-npm
  args:
    executable: /bin/bash

- name: Install OpenAPI generator CLI via npm
  shell: |
    source ~/.nvm/nvm.sh
    npm install -g {{ openapi_generator_cli_pkg }}
    openapi-generator-cli version-manager set {{ openapi_generator_jar_version }} --openapitools /tmp/openapitools.json
  args:
    executable: /bin/bash

- name: Generate JWT token
  command: "scontrol token lifespan=31556926"
  become_user: "{{ slurm_user }}"
  register: jwt_token_result

- name: Save JWT token to file
  copy:
    content: "{{ jwt_token_result.stdout }}"
    dest: "{{ slurm_jwt_token_path }}"
    owner: "{{ slurm_user }}"
    group: "{{ slurm_group }}"
    mode: "0600"
  become: true

- name: Read JWT token from file
  slurp:
    src: "{{ slurm_jwt_token_path }}"
  register: jwt_token_file
  become: true

- name: Set JWT token fact
  set_fact:
    slurm_jwt_token: "{{ (jwt_token_file.content | b64decode).split('=')[1] }}"

- name: Create sdk output directory
  ansible.builtin.file:
    path: "{{ openapi_download_path }}"
    state: directory

- name: Download Slurm OpenAPI spec
  uri:
    url: "{{ slurm_rest_api_spec_url }}"
    dest: "{{ openapi_download_path }}/{{ slurm_rest_api_spec_filename }}"
    headers:
      X-SLURM-USER-NAME: "{{ slurm_user }}"
      X-SLURM-USER-TOKEN: "{{ slurm_jwt_token }}"
  become: true

- name: Find the openapi-generator jar
  find:
    paths: "{{ ansible_env.HOME }}/.nvm"
    patterns: "{{ openapi_generator_jar_version }}.jar"
    file_type: file
    recurse: yes
  register: openapi_jar_find

- name: Copy openapi-generator jar to local path
  copy:
    remote_src: true
    src: "{{ item.path }}"
    dest: "{{ openapi_download_path }}/openapi-generator.jar"
  with_items: "{{ openapi_jar_find.files }}"
  when: openapi_jar_find.matched > 0
  become: true

- name: Create SDK output directory
  file:
    path: "{{ sdk_output_dir }}"
    state: directory

- name: Generate Slurm python-pydantic SDK
  shell: |
    java -jar {{ openapi_download_path }}/openapi-generator.jar generate \
      -g python \
      -i {{ openapi_download_path }}/{{ slurm_rest_api_spec_filename }} \
      -o {{ sdk_output_dir }}/ 
  args:
    chdir: "{{ sdk_output_dir }}"

- name: Install wheel package (Debian)
  become: true
  shell: |
    /usr/bin/python3.10 -m pip install wheel
  when: ansible_os_family == "Debian"

- name: Build slurm sdk python wheel
  shell: |
    /usr/bin/python3.10 setup.py bdist_wheel
  args:
    chdir: "{{ sdk_output_dir }}"
    executable: /bin/bash
  when: ansible_os_family == "Debian"

- name: Install slurm sdk the python wheel
  become: true
  shell: |
    /usr/bin/python3.10 -m pip install --upgrade pip
    /usr/bin/python3.10 -m pip install pydantic>=2
    /usr/bin/python3.10 -m pip install openapi_client
    /usr/bin/python3.10 -m pip install --force-reinstall --upgrade dist/*.whl
  args:
    chdir: "{{ sdk_output_dir }}"
    executable: /bin/bash
  when: ansible_os_family == "Debian"

- name: Build python wheel
  become: true
  shell: |
    /usr/bin/pip3.8 install wheel
    /usr/bin/python3.8 setup.py bdist_wheel
  args:
    chdir: "{{ sdk_output_dir }}"
    executable: /bin/bash
  when: ansible_os_family == "RedHat"

- name: Install the python wheel
  become: true
  shell: |
    /usr/bin/python3.8 -m pip install --upgrade pip
    /usr/bin/python3.8 -m pip install pydantic>=2
    /usr/bin/python3.8 -m pip install openapi_client
    /usr/bin/python3.8 -m pip install --force-reinstall --upgrade dist/*.whl
  args:
    chdir: "{{ sdk_output_dir }}"
    executable: /bin/bash
  when: ansible_os_family == "RedHat"

- name: Install test requirements (ubuntu)
  pip:
    requirements: "{{ sdk_output_dir }}/test-requirements.txt"
    executable: /usr/bin/pip3.10
    state: present
  when: >
    ansible_stat.stat.exists is defined and
    ansible_stat.stat.exists == True and
    ansible_os_family == "Debian"
  vars:
    ansible_stat: "{{ lookup('file', sdk_output_dir + '/test-requirements.txt', errors='ignore') }}"

- name: Install test requirements
  pip:
    requirements: "{{ sdk_output_dir }}/test-requirements.txt"
    executable: /usr/bin/pip3.8
    state: present
  when: >
    ansible_stat.stat.exists is defined and
    ansible_stat.stat.exists == True and
    ansible_os_family == "RedHat"
  vars:
    ansible_stat: "{{ lookup('file', sdk_output_dir + '/test-requirements.txt', errors='ignore') }}"
