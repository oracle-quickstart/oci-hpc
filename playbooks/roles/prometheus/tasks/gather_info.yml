- name: Gather serial number
  command: "sudo dmidecode -s system-serial-number"
  register: serial_output

- name: Gather FSS IP
  shell: "getent hosts $(awk '{{nfs_source_path}}/ {split($1,a,\":\"); print a[1]}' /etc/fstab) | awk '{print $1}' | sort -u"
  register: nfs_output
  ignore_errors: true

- name: Extract the IP address using regex
  set_fact:
    ip_address: "{{ nfs_output.stdout | regex_search('([0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3})') }}"
  when: nfs_output.rc == 0

- name: Extract the IP address using regex
  set_fact:
    ip_address: "None"
  when: nfs_output.rc != 0

- name: gather metadata
  uri:
    url: http://169.254.169.254/opc/v2/instance/
    method: GET
    headers:
      Authorization: 'Bearer Oracle'
    return_content: yes
  register: i_metadata

- name: set fact
  set_fact:
    instance_metadata: "{{ i_metadata['content'] }}"

- name: make sure freeformTags in included
  set_fact:
    instance_metadata: "{{ instance_metadata | combine({'freeformTags': {'cluster_name':''}}) }}"
  when: "not 'freeformTags' in instance_metadata"
  
- name: make sure cluster_name in included
  set_fact:
    cluster_name_gathered: "{{ instance_metadata['displayName'].split('-') | slice(2, 10) | join('-') }}"
  when: "not 'cluster_name' in instance_metadata['freeformTags']"

- name: make sure cluster_name in included
  set_fact:
    cluster_name_gathered: "{{instance_metadata['freeformTags']['cluster_name']}}"
  when: "'cluster_name' in instance_metadata['freeformTags']"

- name: gather RDMA metadata
  uri:
    url: http://169.254.169.254/opc/v2/host/
    method: GET
    headers:
      Authorization: 'Bearer Oracle'
    return_content: yes
  register: h_metadata

- name: set fact
  set_fact:
    rdma_metadata: "{{ h_metadata['content'] }}"

- name: add empty networkblockID
  set_fact:
    rdma_metadata : "{{ rdma_metadata | combine({'networkBlockId': 'None'}) }}"
  when: "not 'networkBlockId' in rdma_metadata"

- name: add empty rdmaTopologyData
  set_fact:
    rdma_metadata : "{{ rdma_metadata | combine({'rdmaTopologyData': {'customerHPCIslandId': 'None','customerLocalBlock': 'None','customerNetworkBlock': 'None'}}) }}"
  when: "not 'rdmaTopologyData' in rdma_metadata"

- name: add empty customerHPCIslandId
  set_fact:
    rdma_metadata : "{{ rdma_metadata | combine({'rdmaTopologyData': {'customerHPCIslandId': 'None'}}, recursive=True) }}"
  when: "not 'customerHPCIslandId' in rdma_metadata['rdmaTopologyData']"

- name: add empty customerLocalBlock
  set_fact:
    rdma_metadata : "{{ rdma_metadata | combine({'rdmaTopologyData': {'customerLocalBlock': 'None'}}, recursive=True) }}"
  when: "not 'customerLocalBlock' in rdma_metadata['rdmaTopologyData']"

- name: add empty customerNetworkBlock
  set_fact:
    rdma_metadata : "{{ rdma_metadata | combine({'rdmaTopologyData': {'customerNetworkBlock': 'None'}}, recursive=True) }}"
  when: "not 'customerNetworkBlock' in rdma_metadata['rdmaTopologyData']"

- name: Build the host_info dictionary
  set_fact:
    host_info: "{{ host_info | default({}) | combine({'serial': serial_output.stdout, 'hostname': ansible_hostname, 'cluster_name': cluster_name_gathered, 'ocid': instance_metadata['id'], 'oci_name': instance_metadata['displayName'], 'AD': instance_metadata['availabilityDomain'],'compartment': instance_metadata['compartmentId'],'rackID': rdma_metadata['rackId'],'networkBlockId': rdma_metadata['networkBlockId'],'rail_id': rdma_metadata['rdmaTopologyData']['customerLocalBlock'], 'fss_mount': ip_address, 'hpc_island': rdma_metadata['rdmaTopologyData']['customerHPCIslandId'], 'shape': instance_metadata['shape'] })   }}"

- name: Set exporter_ports based on host group membership
  ansible.builtin.set_fact:
    exporter_ports: "{{ controller_ports }}"
  when: "(inventory_hostname in groups['controller'] or inventory_hostname in groups['slurm_backup'])"

- name: Set exporter_ports for login nodes
  ansible.builtin.set_fact:
    exporter_ports: "{{ login_ports }}"
  when: "inventory_hostname in groups['login']"

- name: Set exporter_ports for compute nodes
  ansible.builtin.set_fact:
    exporter_ports: "{{ compute_ports }}"
  when: "inventory_hostname in groups['compute']"

- name: Create Prometheus target JSON
  become: true
  template:
    src: templates/prometheus_target.json.j2
    dest: "{{ prometheus_targets_dir }}/{{ ansible_hostname }}.json"
    owner: "{{ prometheus_user }}"
    group: "{{ prometheus_user }}"
    mode: '0775'
  delegate_to: "{% if groups['monitoring'] | length > 0 %}{{groups['monitoring'][0]}}{% else%}127.0.0.1{% endif %}"
