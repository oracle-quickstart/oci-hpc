---
- name: Check NVMe path and names
  set_fact: 
    nvme_path_edited: "{% if nvme_path[-1] == '/' %}{{nvme_path[:-1]}}{% else%}{{nvme_path}}{% endif %}"
    nvmes: "{{ (hostvars[inventory_hostname]['ansible_devices'] | select('match','nvme[1-9][0-9]n1') | list ) + (hostvars[inventory_hostname]['ansible_devices'] | select('match','nvme[0-9]n1') | list) }}"
    dev_prefix: "/dev/" 

- name: Prefix Devices
  set_fact:
    nvme_devices: "{{ [dev_prefix] | product(nvmes) | map('join') | list }}"

- name: Create Mdadm Raid?
  set_fact:
    mdadm_vol: "{{( log_vol | bool ) and ( ( nvmes | count ) > 1 )}}"


- name: Partition Per Disk
  block:
    - name: Create A New Primary Partition
      parted:
        device: "/dev/{{item}}"
        number: 1
        state: present
        label: gpt
      with_items:
        - "{{ nvmes }}"
    
    - name: Create A Filesystem
      filesystem:
        dev: "/dev/{{item}}p1"
        fstype: xfs
        opts: "-L locscratch{{item | replace('nvme','') | replace('n1','')}}"
      with_items:
        - "{{ nvmes }}"
    
    - name: Mount Local Volume
      mount:
        path: "{% if item | replace('nvme','') | replace('n1','') == '0' %}{{ nvme_path_edited}}{% else%}{{ nvme_path_edited}}{{item | replace('nvme','') | replace('n1','')}}{% endif %}"
        src: "LABEL=locscratch{{item | replace('nvme','') | replace('n1','')}}"
        fstype: xfs
        opts: defaults,noatime
        state: mounted
      with_items:
        - "{{ nvmes }}"
    
    - name: "set permissions on {{ nvme_path_edited }}"
      become: true
      file:
        path: "{% if item | replace('nvme','') | replace('n1','') == '0' %}{{ nvme_path_edited}}{% else%}{{ nvme_path_edited}}{{item | replace('nvme','') | replace('n1','')}}{% endif %}"
        state: directory
        owner: "{{ ansible_user }}"
        mode: 0775
        group: "{{privilege_group_name}}"
        recurse: no
      with_items:
        - "{{ nvmes }}"
      
  when: not ( mdadm_vol | bool )

- name: Arrays
  block:
    - name: Checking Status Of Array
      shell: "cat /proc/mdstat | grep md0"
      register: "array_check"
      changed_when: false
      failed_when: false
      check_mode: no
    
    - debug: 
        msg: "{{ array_check.rc }}"

    # Creating raid arrays
    - name: Creating Array
      shell: "yes | mdadm --create /dev/md0 {% if redundancy | bool %}--level=10{% else%}--level=0{% endif%} --raid-devices={{ nvmes | count }} {{ nvme_devices | join(' ') }}"
      register: "array_created"
      when: array_check.rc != 0 
     
    # Capture the raid array details to append to mdadm.conf
    - name: Capturing Array Details
      command: "mdadm --detail --scan --verbose"
      register: "array_details"
      changed_when: false
    
    - name: Create Filesystem
      filesystem:
        fstype: xfs
        dev: "/dev/md0"
        opts: -f

    - name: Mount Array
      mount:
        path: "{{ nvme_path_edited}}"
        src: "/dev/md0"
        fstype: xfs
        opts: defaults,nofail,noatime,discard
        state: mounted

    - name: "Set Permissions On {{ nvme_path_edited }}"
      become: true
      file:
        path: "{{ nvme_path_edited}}"
        state: directory
        owner: "{{ ansible_user }}"
        mode: 0775
        group: "{{privilege_group_name}}"
        recurse: no
     
    - name: Ensure mdadm_conf's directory exists
      file:
        path: /etc/mdadm
        state: directory
    
    - name: Ensure mdadm_conf file exists
      copy:
        content: ""
        dest: /etc/mdadm/mdadm.conf
        force: no
    
    # Updating mdadm.conf in order to persist between reboots
    - name: Updating mdadm_conf
      lineinfile:
        dest: /etc/mdadm/mdadm.conf
        regexp: "^{{ item }}"
        line: "{{ item }}"
        state: "present"
      with_items: '{{ array_details.stdout_lines }}'
      when: array_created.changed
   
    - name: rebuild initramfs if ubuntu
      shell: update-initramfs -k all -u
      when: ansible_facts['distribution'] == "Ubuntu" and array_created.changed 
  
  when:
    - mdadm_vol | bool 


